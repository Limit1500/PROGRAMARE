Ce este un API?
API (Application Programming Interface) este un set de reguli și specificații care permit unui software să comunice cu alt software. Practic, un API este ca un intermediar care permite diferitelor aplicații să „vorbească” între ele.

Cum funcționează?
Gândește-te la un API ca la un meniu într-un restaurant. Meniul îți oferă o listă de preparate pe care le poți comanda. Când faci o comandă, chelnerul (care este API-ul) ia comanda ta și o transmite bucătarului (care este serverul). Bucătarul pregătește preparatul și chelnerul ți-l aduce înapoi.

În mod similar, API-ul primește cereri (comenzi) de la aplicația client, le trimite către server pentru a fi procesate, și apoi returnează rezultatul aplicației client.

Exemplu Sugestiv
Imagină-ți că ai o aplicație care afișează vremea. Pentru a obține informații despre vreme, aplicația ta trebuie să comunice cu un serviciu de prognoză meteo. Aici intervine API-ul.

Cererea: Aplicația ta trimite o cerere către API-ul unui serviciu meteo, de exemplu, „Vreau să știu temperatura în București”.

Procesare: API-ul serviciului meteo primește cererea, obține datele relevante de la baza de date și le pregătește.

Răspuns: API-ul trimite aceste date înapoi către aplicația ta, care apoi le afișează utilizatorului, de exemplu, „Temperatura în București este de 20°C”.





CUM SA CREEZI UN API CU TYPESCRIPT

1. prima oara iti pregatesti un directory in care poti sa iti creezi proiectul si navighezi cu cd acolo
2. initializezi npm init -y
3. creezi 2 foldere: dist si src (in dist sunt puse js urile care s au creat in urma rularii fisierelor ts iar in src punem fisierele ts inclusiv server.ts + alte resurse)
4. instalam modulele necesare:
	npm install express
	npm install typescript --save-dev
	npm install pg
5. instalam alte module importa tipuri pentru fiecare modul in parte pentru a nu genera erori de la ts: 
	npm install --save-dev @types/pg
	npm install --save-dev @types/express
6. adaugam alte setari pentru package.json
	"scripts": {
    	"test": "echo \"Error: no test specified\" && exit 1",
    	"build": "tsc",												// adaugam comanda build care da run la tsc conform fisierului tsconfig.json si adapteaza fisierele js din dist 
      "start": "node dist/server.js"        // da run la server prin fisierul din dist server.js care este copia lui server.ts
  	},

	+

	"type": "module",												// adaugam asta inafara oricarul obiectul fisierului package.json

7. initializezi rularea typescriptului prin comanda tsc --init si setezi fisierul tsconfig.json
{
  "compilerOptions": {
    "target": "ESNext",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    "module": "NodeNext",                                /* Specify what module code is generated. */
    "rootDir": "./src",                                  /* Specify the root folder within your source files. */
    "moduleResolution": "NodeNext",                     /* Specify how TypeScript looks up a file from a given module specifier. */
    "outDir": "./dist",                                   /* Specify an output folder for all emitted files. */
    "removeComments": true,                           /* Disable emitting comments. */
    "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */
    "strict": true,                                      /* Enable all strict type-checking options. */
    "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
  },
  "include": ["src/**/*.ts"]
}


PENTRU A DA RUN TREBUIE SA CONSTRUIM MAI INTAI FISIERELE JavaScript PRIN RULAREA COMENZII npm run build CARE DA RUN LA TOT TypeScript UL DIN PROIECT.
DUPA CE S AU FORMAT FISIERELE JavaScript, DAM RUN LA SERVER PRIN npm run start CARE RULEAZA FISIERUL DIN DIST server.js